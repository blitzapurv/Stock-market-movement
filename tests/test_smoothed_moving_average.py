from __future__ import absolute_import
import unittest
import numpy as np

from tests.sample_data import SampleData
from pyti import smoothed_moving_average


class TestSmoothedMovingAverage(unittest.TestCase):
    def setUp(self):
        """Create data to use for testing."""
        self.data = SampleData().get_sample_close_data()

        self.smmma_period_6_expected = [
        792.45, 798.13909091, 800.68318681, 803.65980626,
        804.81347022, 806.03296478, 807.45870072, 809.13991366,
        809.834554  , 809.8356365 , 810.95540439, 812.25717225,
        812.82395014, 811.93397464, 811.49124318, 808.6154927 ,
        805.62303061, 800.524347  , 796.6868385 , 791.17184537,
        786.59880155, 784.77937771, 785.5680531 , 785.60551549,
        784.69505223, 783.73751227, 783.94946985, 784.09209006,
        782.73153039, 783.30535937, 782.74918029, 781.48060569,
        776.75899385, 775.92246204, 776.6516195 , 781.48149706,
        786.57056406, 789.14966358, 787.80695672, 786.87015989,
        787.12861312, 790.1886234 , 793.47514686, 797.82404932,
        801.0792645 , 804.58351889, 808.57869102, 813.10629227,
        814.93215098, 816.04858183, 817.88898672, 818.4892014 ,
        816.54754436, 814.55618144, 812.81007409, 812.63672203,
        812.12558602, 812.46633039, 810.50690026, 809.26906158,
        807.92919817, 807.07265459, 805.9572007 , 805.64099788,
        805.140828  , 805.96069487, 806.755583  , 806.07131634,
        807.55276871, 808.95231127, 808.29859116, 806.87882314,
        804.96401611, 803.79834515, 803.37028713, 801.21857054,
        799.13547379, 799.08289479, 797.31574467, 798.23645432,
        799.86204589, 801.22170535, 800.49642093, 798.98035044,
        797.45862508, 796.53552076, 796.41626728, 795.88355601,
        795.11962994, 794.86635827, 795.15363191, 795.4530266 ,
        796.1525222 , 797.25210187, 798.61341827, 799.04284857,
        800.19570716, 801.33808932, 802.48174112, 803.48311761,
        804.14926468, 804.32938724, 804.7628227 , 803.51068558,
        802.74557131, 802.30797609, 802.07998007, 800.28998339,
        794.54831948, 789.11859955, 783.87383295, 779.48152746,
        776.11460621, 772.49717184, 769.9276432 , 767.17470266,
        764.84558555, 759.97632129, 755.94693441, 751.53577867,
        748.36481556, 744.8373463 , 740.32778858, 734.81649048,
        730.50874207, 726.23895172, 723.57412644]

        self.smmma_period_8_expected = [792.45      , 798.01266667, 800.49591716, 803.34562242,
        804.4887294 , 805.66598505, 807.01086626, 808.57036599,
        809.27274639, 809.36896616, 810.38886767, 811.56299963,
        812.13613391, 811.51007214, 811.21239663, 808.93864139,
        806.50348876, 802.33636505, 799.06290253, 794.4159284 ,
        790.41276513, 788.49452592, 788.61845614, 788.2499492 ,
        787.20667149, 786.14795316, 786.00045018, 785.84673853,
        784.58591072, 784.78632077, 784.17580439, 783.0328969 ,
        779.26026869, 778.31135767, 778.56101946, 781.96747713,
        785.74605885, 787.79436597, 786.9529643 , 786.3547283 ,
        786.61397379, 788.98090716, 791.60421149, 795.1085242 ,
        797.89555573, 800.9276292 , 804.38693235, 808.31252669,
        810.2837997 , 811.70386415, 813.62925403, 814.61279616,
        813.64037575, 812.50949347, 811.45512533, 811.49450694,
        811.25382447, 811.61850431, 810.25442448, 809.35732403,
        808.34111376, 807.64704839, 806.73846556, 806.40359229,
        805.93306325, 806.44900711, 806.98420089, 806.44236406,
        807.50717468, 808.56261989, 808.1210087 , 807.078313  ,
        805.61718851, 804.66124108, 804.23231675, 802.51070978,
        800.78681202, 800.54095315, 799.03329447, 799.50914358,
        800.56927192, 801.50062929, 800.92179173, 799.73155176,
        798.49634325, 797.67429188, 797.44250331, 796.91468623,
        796.21284561, 795.88623794, 795.97420866, 796.09618314,
        796.54041205, 797.31661329, 798.32953976, 798.68709826,
        799.59621313, 800.52793842, 801.48694786, 802.36233077,
        803.00204031, 803.28053561, 803.73671914, 802.9258785 ,
        802.42514328, 802.13700016, 801.98737505, 800.65645244,
        796.30439381, 792.01259279, 787.71726712, 783.94260752,
        780.85978072, 777.55355732, 774.99436211, 772.29631634,
        769.9092764 , 765.62436624, 761.89631999, 757.84427955,
        754.6774943 , 751.24280722, 747.05995601, 742.08496119,
        737.94559081, 733.81364175, 730.86818641]

        self.smmma_period_10_expected = [792.45      , 797.93947368, 800.38616236, 803.16134051,
        804.29407463, 805.44354041, 806.73861793, 808.22428868,
        808.92227339, 809.06317562, 810.02308907, 811.11941498,
        811.68531859, 811.19450412, 810.9748234 , 809.03486236,
        806.92681288, 803.309138  , 800.408374  , 796.31599938,
        792.72441153, 790.85597188, 790.70060458, 790.16697869,
        789.09319403, 788.01415718, 787.69413208, 787.38873605,
        786.19042022, 786.18724354, 785.54189793, 784.46679241,
        781.24247148, 780.26606778, 780.26852244, 782.85903019,
        785.8313935 , 787.4813628 , 786.83257128, 786.36134907,
        786.56998967, 788.48390508, 790.64884235, 793.56826995,
        795.96738232, 798.60133422, 801.61752421, 805.05162187,
        806.96340737, 808.43766462, 810.31159017, 811.43411721,
        810.97297292, 810.33351336, 809.70625312, 809.9131946 ,
        809.87879033, 810.30886544, 809.34705847, 808.7192244 ,
        807.96908876, 807.45042493, 806.74245498, 806.47389284,
        806.09009631, 806.48746617, 806.91208451, 806.48554611,
        807.3335819 , 808.19576393, 807.87900892, 807.06869677,
        805.90029339, 805.10693791, 804.71910062, 803.29271559,
        801.83500717, 801.53342511, 800.22776565, 800.48904617,
        801.23928907, 801.91748018, 801.41265176, 800.41124304,
        799.35498247, 798.61139789, 798.33222893, 797.82095795,
        797.16880696, 796.81189907, 796.78970764, 796.80573787,
        797.09017988, 797.65619018, 798.43260609, 798.70835664,
        799.4335474 , 800.19521764, 800.9957195 , 801.74516745,
        802.31866442, 802.60980424, 803.04183218, 802.46263887,
        802.10836943, 801.90952968, 801.81257548, 800.76530596,
        797.27273942, 793.74243278, 790.13315942, 786.87181901,
        784.11261848, 781.14233859, 778.73609157, 776.20346995,
        773.90311276, 770.07578623, 766.64819531, 762.93136377,
        759.88921855, 756.62028815, 752.73625019, 748.18861554,
        744.2667465 , 740.3290651 , 737.32115394]

    def test_smma_period_6(self):
        period = 6
        smma = smoothed_moving_average.smoothed_moving_average(self.data, period)
        np.testing.assert_allclose(smma, self.smmma_period_6_expected)

    def test_smma_period_8(self):
        period = 8
        smma = smoothed_moving_average.smoothed_moving_average(self.data, period)
        np.testing.assert_allclose(smma, self.smmma_period_8_expected)

    def test_smma_period_10(self):
        period = 10
        smma = smoothed_moving_average.smoothed_moving_average(self.data, period)
        np.testing.assert_allclose(smma, self.smmma_period_10_expected)

    def test_smma_invalid_period(self):
        period = 128
        with self.assertRaises(Exception) as cm:
            smoothed_moving_average.smoothed_moving_average(self.data, period)
        expected = "Error: data_len < period"
        self.assertEqual(str(cm.exception), expected)
