from __future__ import absolute_import
import unittest
import numpy as np

from tests.sample_data import SampleData
from pyti import average_true_range_percent


class TestAverageTrueRangePercent(unittest.TestCase):
    def setUp(self):
        """Create data to use for testing."""
        self.close_data = SampleData().get_sample_close_data()

        self.atr_period_6_expected =  [ np.nan, np.nan, np.nan, np.nan, np.nan,
        2.15887758, 1.60417273, 1.48184495, 1.30135045, 1.19643203,
        1.07364697, 1.0507166 , 1.03952056, 1.08784474, 1.11526089,
        1.46691573, 1.82374481, 2.44533432, 2.77080971, 3.36688772,
        3.48506221, 3.44448893, 3.34989509, 3.33621597, 3.33586784,
        3.32096366, 3.02939348, 2.74250828, 2.51914665, 2.28600577,
        2.13637399, 2.02699917, 2.46956576, 2.72150244, 2.94776033,
        3.46493173, 4.07268293, 4.65838017, 4.84453274, 4.70650344,
        4.54369949, 4.34505634, 4.19366012, 4.23572689, 4.30136875,
        4.24655049, 3.97519483, 3.79941905, 3.58290937, 3.36756547,
        3.07204679, 2.86655629, 3.02916756, 2.99719158, 2.97621496,
        2.92910681, 2.80596625, 2.53162734, 2.42531363, 2.2944659 ,
        2.19645214, 2.10625943, 2.04765488, 1.7748433 , 1.55806333,
        1.48565447, 1.44979303, 1.4352358 , 1.42991901, 1.46202487,
        1.5102329 , 1.60375686, 1.77465698, 1.90352275, 2.00749094,
        2.00290748, 1.93712398, 1.85486961, 1.83550089, 1.80033354,
        1.89315449, 1.98061307, 2.0822876 , 2.15874036, 2.1858867 ,
        2.1992148 , 2.2042277 , 1.99037723, 1.78841462, 1.61140421,
        1.44847659, 1.32467736, 1.27420498, 1.29546145, 1.32056534,
        1.28996632, 1.25493005, 1.19718256, 1.14079249, 1.10080571,
        1.06916002, 0.9609318 , 0.86642285, 0.96576   , 1.03760093,
        1.07646367, 1.09756465, 1.25407898, 1.84373026, 2.39664115,
        2.96087536, 3.42312988, 3.58836589, 3.26212366, 2.87527816,
        2.53759086, 2.24978572, 2.45542212, 2.53157807, 2.75851193,
        2.83372614, 2.97457455, 2.92976332, 3.15033311, 3.21252967,
        3.34566051, 3.29053459]

        self.atr_period_8_expected =  [ np.nan, np.nan, np.nan, np.nan, np.nan,
        np.nan, np.nan, 2.7907262 , 2.1153641 , 1.81567752,
        1.54891253, 1.46485779, 1.36455589, 1.34818629, 1.32438384,
        1.61790026, 1.91596647, 2.50904902, 2.94970089, 3.5570949 ,
        3.90434471, 4.13075491, 4.03808335, 3.97278246, 3.89366693,
        3.8078663 , 3.70086611, 3.63497864, 3.42174511, 3.15928045,
        2.93965319, 2.75849375, 3.03678978, 3.13147361, 3.24116258,
        3.56848275, 4.01099719, 4.47557266, 4.96657409, 5.28266649,
        5.22344783, 4.96411251, 4.79533773, 4.73301778, 4.74073785,
        4.74777002, 4.82190564, 4.8910891 , 4.79877738, 4.60379849,
        4.27883606, 4.04869367, 4.05451985, 4.04131634, 4.03059408,
        3.8474699 , 3.73080571, 3.59916305, 3.52647821, 3.28587378,
        3.09161866, 2.90937727, 2.76865232, 2.62579957, 2.51635005,
        2.3309483 , 2.197429  , 2.10325713, 2.03617308, 2.01801191,
        1.99637225, 2.01101843, 2.09247552, 2.14707159, 2.19180667,
        2.34706181, 2.48977537, 2.40622481, 2.33517976, 2.23031271,
        2.24091542, 2.26301131, 2.31435392, 2.34768736, 2.36749404,
        2.37457041, 2.3529641 , 2.35192477, 2.34995506, 2.16082067,
        1.9893824 , 1.85128373, 1.74492863, 1.69920943, 1.70101981,
        1.71654787, 1.68478679, 1.63420694, 1.60189403, 1.5378288 ,
        1.4602889 , 1.39464457, 1.33082585, 1.35484215, 1.35887126,
        1.36282778, 1.36667234, 1.46529282, 1.99549144, 2.49248548,
        2.90757546, 3.26104816, 3.56162511, 3.90750657, 4.01675427,
        3.73800942, 3.4172157 , 3.4633457 , 3.43150091, 3.53921435,
        3.55498605, 3.6469403 , 3.85344135, 4.23385004, 4.19887821,
        4.24341932, 4.17106774]

        self.atr_period_10_expected =  [ np.nan, np.nan, np.nan, np.nan, np.nan,
        np.nan, np.nan, np.nan, np.nan, 2.80919688,
        2.14520547, 1.95086186, 1.74776211, 1.63811185, 1.54943542,
        1.82260916, 2.0957259 , 2.66538907, 3.07313808, 3.69109604,
        4.15379979, 4.42482375, 4.52601985, 4.69751995, 4.63563911,
        4.50370332, 4.31978653, 4.19123924, 4.12475274, 3.97278202,
        3.75293438, 3.56405486, 3.74451916, 3.72071864, 3.73788817,
        3.92631361, 4.2479884 , 4.61821702, 5.03235042, 5.28389247,
        5.47107476, 5.55536682, 5.46767604, 5.34049584, 5.28849036,
        5.23030321, 5.24431414, 5.33530402, 5.52129533, 5.56008946,
        5.33464766, 5.14603821, 5.07209279, 4.96354608, 4.86300737,
        4.72460471, 4.65424182, 4.44673254, 4.39815624, 4.27463158,
        4.11469372, 3.86277699, 3.65853046, 3.44852405, 3.28049364,
        3.09525218, 2.95320896, 2.81325316, 2.67241074, 2.59294869,
        2.55861694, 2.51997921, 2.53899454, 2.53536556, 2.52915422,
        2.62977983, 2.71732942, 2.75560358, 2.86100135, 2.7349462 ,
        2.68721068, 2.66021323, 2.67289132, 2.66912522, 2.65430887,
        2.62937039, 2.60036496, 2.59433372, 2.57018121, 2.53541039,
        2.50139729, 2.33930463, 2.22080319, 2.15169414, 2.10541278,
        2.0811099 , 2.04380627, 2.03209576, 2.00693049, 1.95277386,
        1.90260527, 1.82690723, 1.7312143 , 1.71799392, 1.68365117,
        1.65349139, 1.62695298, 1.69874361, 2.13669062, 2.53006523,
        2.94048291, 3.29915572, 3.53421927, 3.81810805, 4.03877993,
        4.28347608, 4.36257702, 4.4307647 , 4.34474384, 4.3526568 ,
        4.30800716, 4.3466619 , 4.51085812, 4.82456851, 4.98258387,
        5.19563735, 5.07598353]

    def test_atrp_period_6(self):
        period = 6
        atrp = average_true_range_percent.average_true_range_percent(self.close_data, period)
        np.testing.assert_allclose(atrp, self.atr_period_6_expected)

    def test_atrp_period_8(self):
        period = 8
        atrp = average_true_range_percent.average_true_range_percent(self.close_data, period)
        np.testing.assert_allclose(atrp, self.atr_period_8_expected)

    def test_atrp_period_10(self):
        period = 10
        atrp = average_true_range_percent.average_true_range_percent(self.close_data, period)
        np.testing.assert_allclose(atrp, self.atr_period_10_expected)

    def test_atrp_invalid_period(self):
        period = 128
        with self.assertRaises(Exception) as cm:
            average_true_range_percent.average_true_range_percent(self.close_data, period)
        expected = "Error: data_len < period"
        self.assertEqual(str(cm.exception), expected)
