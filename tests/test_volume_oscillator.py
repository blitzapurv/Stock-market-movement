from __future__ import absolute_import
import unittest
import numpy as np

from tests.sample_data import SampleData
from pyti import volume_oscillator


class TestVolumeOscillator(unittest.TestCase):
    def setUp(self):
        """Create data to use for testing."""
        self.volume = SampleData().get_sample_volume()

        self.vo_short_6_long_12_expected = [np.nan, np.nan, np.nan, np.nan,
        np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan,
        -22.451875730726861, -23.757758116249278, -26.714997099725323,
        -23.347706322796604, -16.561899562222742, -15.109395228570992,
        -8.5248707938068691, -7.8728930409015341, -1.0816061761979803,
        1.8258298278830958, 3.6999020736683557, 5.7401361861216254,
        9.2555754838608983, 9.7252122699808297, 2.8345352780593793,
        0.94810594087582578, 1.1022413182956203, -0.77199077125778903,
        -3.2967779477419383, -2.6787862061060701, 1.8400272908980326,
        -0.38950327953981229, 1.5545690806294965, 3.3962579142126899,
        3.4722574302939875, 4.404558798476133, 5.012707713214783,
        12.385173784930396, 13.985996383818646, 20.001691791190236,
        28.426377916268358, 32.826997409438263, 31.324000021551672,
        24.47921621547594, 22.397969136554348, 7.4992944340013121,
        -11.651444017845709, -28.959933483763962, -29.995910779627149,
        -30.496356837608129, -37.764938273370333, -31.351298792413658,
        -20.952451037992937, -6.9611196030975302, -2.2846260245607377,
        0.27216598126598429, 8.0967690232952894, 11.411163969073117,
        13.316560598103122, 9.1398157318990361, 1.3415071810522645,
        -1.060582249648085, -6.6381199627693874, -15.666192708768961,
        -20.331516907797699, -17.059061754339879, -12.453914962638715,
        0.19618318021117476, 10.388282501727039, 19.253098390986288,
        24.238370064827087, 24.259337956590208, 26.530883360901026,
        12.162348984031016, 7.8018577023731286, 4.1224630319134921,
        -1.0934928194298177, -2.2892415998402664, -0.76267617582863878,
        6.3634416717688156, 3.2530451496971859, 6.9686760636509106,
        4.5843839510525095, 2.3849047063786757, -8.945679715764399,
        -15.079987478226228, -11.878960826732603, -20.967049340821912,
        -10.144224206934217, -0.46094343430505308, 15.835661058344726,
        25.659004830636157, 35.185163644313221, 43.446792961032159,
        37.816100873129827, 28.703729914306741, 15.540599710036176,
        4.8095826955027041, -18.61413935942052, -25.017408786178496,
        -23.216107065345209, -12.95937111741603, -5.4048087826867004,
        -2.5555684895047124, 7.7869365015416605, 7.6511304919125989,
        3.6432295380458077, -16.312508436416646, -26.09553840863893,
        -22.644534929123516, -25.323278478661944, -24.235134224134992,
        -23.496952948246768, -14.892311899618676, -6.5584987474459995,
        -13.901875741526798, -8.9770587720563171, -7.2285979215158465,
        -6.8450251605742878, -1.7329552316140595, -4.5392043434714502,
        1.4335636113745385, 1.9027784142633766, 4.2210794350907141,
        6.1266740243960589, 5.104161409770418]

    def test_vo_short_6_long_12(self):
        short_period = 6
        long_period = 12
        vo = volume_oscillator.volume_oscillator(self.volume, short_period, long_period)
        np.testing.assert_array_equal(vo, self.vo_short_6_long_12_expected)

    def test_vo_invalid_short_period(self):
        short_period = 128
        long_period = 12
        with self.assertRaises(Exception) as cm:
            volume_oscillator.volume_oscillator(self.volume, short_period, long_period)
        expected = "Error: data_len < period"
        self.assertEqual(str(cm.exception), expected)

    def test_vo_invalid_long_period(self):
        short_period = 6
        long_period = 128
        with self.assertRaises(Exception) as cm:
            volume_oscillator.volume_oscillator(self.volume, short_period, long_period)
        expected = "Error: data_len < period"
        self.assertEqual(str(cm.exception), expected)
