from __future__ import absolute_import
import unittest
import numpy as np

from tests.sample_data import SampleData
from pyti import average_true_range


class TestAverageTrueRange(unittest.TestCase):
    def setUp(self):
        """Create data to use for testing."""
        self.close_data = SampleData().get_sample_close_data()

        self.atr_period_6_expected =  [ np.nan, np.nan, np.nan, np.nan, np.nan,
        17.48      , 13.02909091, 12.08      , 10.57347243,  9.68918512,
        8.75720151,  8.59370599,  8.47562691,  8.78869762,  9.02747925,
        11.66447383, 14.43439307, 18.98019593, 21.56299531, 25.73850983,
        26.63737597, 26.72510068, 26.44541183, 26.21565149, 26.02644086,
        25.87030688, 23.78073879, 21.52320499, 19.54782226, 17.97166297,
        16.66328986, 15.71248676, 18.6012632 , 21.00319507, 23.00107909,
        27.91314353, 33.06937082, 37.36160646, 37.84064527, 36.81379927,
        35.82343549, 34.99855978, 33.96445332, 34.71432333, 35.15723746,
        34.91089154, 32.93647674, 31.75326474, 29.52532293, 27.66892819,
        25.40859179, 23.54847329, 24.44053556, 24.11540343, 23.93114928,
        23.77761034, 22.71626096, 20.6117503 , 19.41972875, 18.42639676,
        17.59863351, 16.9088401 , 16.38902013, 14.270805  , 12.50563951,
        12.03469262, 11.75390706, 11.51992015, 11.65326793, 11.92939191,
        12.15782795, 12.8265266 , 14.11544416, 15.18954049, 16.08461964,
        15.83218243, 15.27848426, 14.81706945, 14.4725574 , 14.45379781,
        15.29649898, 16.00374972, 16.59312516, 17.08427124, 17.26522612,
        17.41602182, 17.54168489, 15.78807027, 14.15172486, 12.7881038 ,
        11.53841964, 10.55701624, 10.18918016, 10.39931682, 10.63609737,
        10.33508112, 10.11423425,  9.66186186,  9.21988487,  8.89990405,
        8.63325337,  7.73771112,  6.99142592,  7.69952161,  8.28960135,
        8.61300113,  8.79083427,  9.92402857, 14.12002383, 18.26168655,
        22.43307214, 25.93089346, 27.24574455, 24.60978712, 21.76815593,
        19.11846327, 16.94538606, 18.06282171, 18.62735143, 20.12279286,
        20.75732738, 21.63110615, 21.02925513, 22.28104594, 22.77587162,
        23.58322635, 23.37102196]

        self.atr_period_8_expected =  [ np.nan, np.nan, np.nan, np.nan, np.nan,
        np.nan, np.nan, 22.75      , 17.18733333, 14.70408284,
        12.63370501, 11.98092538, 11.12576996, 10.89199705, 10.72022502,
        12.86505751, 15.16429982, 19.47473666, 22.9551623 , 27.19256769,
        29.84207789, 32.04970118, 31.87824523, 31.21772733, 30.37838936,
        29.66327848, 29.05179893, 28.52731238, 26.55171549, 24.83699916,
        22.92870694, 21.38274017, 22.87370795, 24.16714755, 25.2904675 ,
        28.7473402 , 32.56849495, 35.89543537, 38.79391022, 41.32048903,
        41.1827074 , 39.98493344, 38.83744028, 38.78992048, 38.74842079,
        39.03141735, 39.95189915, 40.87678808, 39.54480488, 37.82618953,
        35.3898252 , 33.25961364, 32.71348795, 32.5164313 , 32.4092009 ,
        31.23260637, 30.20348378, 29.30330579, 28.23686371, 26.38819516,
        24.77097622, 23.3561898 , 22.15973945, 21.11300406, 20.19723204,
        18.88207978, 17.81521615, 16.88179338, 16.59399616, 16.46596821,
        16.07139551, 16.08372317, 16.64334103, 17.13298714, 17.56141255,
        18.55258477, 19.63735627, 19.221405  , 18.41242536, 17.90584259,
        18.10637252, 18.28558397, 18.44239211, 18.5795978 , 18.69965167,
        18.80469797, 18.7253589 , 18.65593764, 18.59519437, 17.14827284,
        15.84722123, 14.75380571, 13.95332176, 13.64040372, 13.70035373,
        13.75280987, 13.57870759, 13.18886708, 12.94650757, 12.43319205,
        11.79154078, 11.23009644, 10.73883305, 10.80147907, 10.8562943 ,
        10.9042576 , 10.94622547, 11.59544819, 15.28227164, 18.99199164,
        22.02924551, 24.703092  , 27.04270716, 29.47862029, 30.41004326,
        28.16253678, 25.73846867, 25.47740999, 25.24898367, 25.81786087,
        26.04062832, 26.52054988, 27.65923136, 29.94432781, 29.76878681,
        29.91143848, 29.62500864]

        self.atr_period_10_expected =  [ np.nan, np.nan, np.nan, np.nan, np.nan,
        np.nan, np.nan, np.nan, np.nan, 22.75      ,
        17.49736842, 15.95590406, 14.25020355, 13.23430563, 12.54190497,
        14.49284124, 16.58704178, 20.68821686, 23.91577517, 28.21695275,
        31.74873793, 34.33132248, 35.73021107, 36.91264201, 36.16725634,
        35.08384887, 33.91032423, 32.89284552, 32.00684385, 31.23242313,
        29.27213761, 27.62712763, 28.20446719, 28.71464611, 29.1663676 ,
        31.62998982, 34.49281618, 37.03948599, 39.30768915, 41.33007852,
        43.1350476 , 44.74736864, 44.28270825, 43.76856769, 43.22547593,
        42.99832268, 43.45176483, 44.58926982, 45.49878629, 45.68336305,
        44.12233734, 42.27418933, 40.92367345, 39.93669176, 39.10246963,
        38.35292364, 37.67934551, 36.2039623 , 35.21647679, 34.3287113 ,
        32.96816047, 31.00998737, 29.28214612, 27.72820247, 26.33055416,
        25.07339982, 23.94255101, 22.58057649, 21.77907854, 21.15716486,
        20.59763393, 20.15428975, 20.19490866, 20.23145658, 20.26434233,
        20.78735763, 21.43212062, 22.01231249, 22.55842342, 21.95724206,
        21.71239359, 21.49505495, 21.29946905, 21.12345703, 20.96505858,
        20.82251   , 20.6942244 , 20.57877393, 20.3378439 , 20.12101688,
        19.92588066, 18.64308829, 17.75865268, 17.27272472, 16.95741564,
        16.67364443, 16.47226104, 16.40002883, 16.22001223, 15.78798139,
        15.36315703, 14.7108051 , 13.96968755, 13.69670652, 13.45102592,
        13.22991527, 13.03091722, 13.44283765, 16.36363147, 19.278338  ,
        22.27856875, 24.99176441, 26.83462008, 28.80418897, 30.57679509,
        32.27213712, 32.85893012, 32.59403438, 31.96862515, 31.75176083,
        31.55658328, 31.60892531, 32.37803745, 34.12224324, 35.32502484,
        36.62352811, 36.05217302]

    def test_average_true_range_period_6(self):
        period = 6
        atr = average_true_range.average_true_range(self.close_data, period)
        np.testing.assert_allclose(atr, self.atr_period_6_expected)

    def test_average_true_range_period_8(self):
        period = 8
        atr = average_true_range.average_true_range(self.close_data, period)
        np.testing.assert_allclose(atr, self.atr_period_8_expected)

    def test_average_true_range_period_10(self):
        period = 10
        atr = average_true_range.average_true_range(self.close_data, period)
        np.testing.assert_allclose(atr, self.atr_period_10_expected)

    def test_average_true_range_invalid_period(self):
        period = 128
        with self.assertRaises(Exception) as cm:
            average_true_range.average_true_range(self.close_data, period)
        expected = "Error: data_len < period"
        self.assertEqual(str(cm.exception), expected)
