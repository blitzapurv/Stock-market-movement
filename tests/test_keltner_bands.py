from __future__ import absolute_import
import unittest
import numpy as np

from tests.sample_data import SampleData
from pyti import keltner_bands


class TestKeltnerBands(unittest.TestCase):
    def setUp(self):
        """Create data to use for testing."""
        self.close_data = SampleData().get_sample_close_data()
        self.high_data = SampleData().get_sample_high_data()
        self.low_data = SampleData().get_sample_low_data()

        self.bandwidth_period_6_expected = [np.nan, np.nan, np.nan, np.nan,
        np.nan, 5.1283333333333303, 5.0749999999999886, 5.0266666666666424,
        4.8866666666666374, 4.6966666666666397, 4.7299999999999613,
        4.8099999999999836, 4.9249999999999732, 4.923333333333308,
        5.0466666666666429, 5.0983333333333194, 5.1333333333333071,
        5.0649999999999791, 5.0033333333333303, 5.0066666666666606,
        4.97999999999998, 4.896666666666647, 4.8466666666666542,
        4.7666666666666515, 4.7216666666666542, 4.7866666666666715,
        4.7116666666666829, 4.7933333333333508, 4.8833333333333639,
        4.9833333333333671, 4.9600000000000177, 5.035000000000025,
        5.1116666666666974, 5.0950000000000273, 4.9233333333333462,
        4.8866666666666561, 4.9416666666666629, 4.8833333333333258,
        5.0049999999999955, 4.9116666666666715, 4.8900000000000245,
        5.0016666666667033, 5.0633333333333894, 5.0066666666667174,
        4.8750000000000382, 4.951666666666692, 5.0483333333333462,
        4.9983333333333348, 4.8749999999999813, 4.97999999999998,
        4.911666666666652, 4.8599999999999755, 4.9433333333333094,
        4.8849999999999909, 5.0550000000000068, 5.0083333333333444,
        5.0083333333333444, 5.0800000000000223, 4.9916666666666929,
        5.1733333333333462, 5.0316666666666761, 5.1183333333333394,
        5.2166666666666783, 5.1499999999999959, 5.1949999999999932,
        5.1199999999999859, 5.1766666666666383, 5.0549999999999686,
        5.0366666666666333, 5.121666666666651, 5.0049999999999768,
        4.9749999999999845, 4.9049999999999914, 4.8300000000000027,
        4.8733333333333348, 4.9366666666666674, 5.0666666666666815,
        5.0566666666666906, 5.0700000000000118, 5.1900000000000164,
        5.1633333333333553, 5.1333333333333639, 4.9150000000000205,
        4.8666666666666929, 5.0300000000000482, 4.9583333333333712,
        4.89500000000002, 4.9300000000000068, 5.0383333333333367,
        5.0099999999999909, 4.8933333333333167, 4.8449999999999891,
        4.9500000000000073, 4.9500000000000073, 5.071666666666677,
        5.128333333333349, 5.071666666666677, 5.1133333333333253,
        5.0549999999999882, 4.9216666666666429, 4.8266666666666538,
        4.859999999999995, 4.8533333333333148, 4.9033333333333262,
        4.9049999999999914, 4.8633333333333253, 4.8999999999999773,
        4.82499999999997, 4.8933333333333167, 4.8066666666666533,
        4.8666666666666556, 4.9733333333333194, 4.8233333333333235,
        4.7783333333333262, 4.7883333333333367, 4.9250000000000114,
        4.9550000000000027, 5.0516666666666952, 5.1850000000000405,
        5.3100000000000209, 5.2783333333333458, 5.2333333333333298,
        5.041666666666667, 4.9633333333333285, 5.036666666666652,
        4.9716666666666542, 5.0449999999999973]

        self.center_band_period_6_expected = [np.nan, np.nan, np.nan, np.nan,
        np.nan, 804.53111111111104, 807.84055555555551, 809.87222222222215,
        811.20277777777767, 811.18888888888887, 812.56055555555565,
        813.93666666666684, 814.47611111111109, 813.25333333333344,
        812.76499999999999, 810.32166666666672, 806.24777777777774,
        799.3022222222221, 793.11833333333323, 785.94166666666661,
        778.38277777777773, 775.18222222222221, 774.8516666666668,
        776.42444444444448, 776.7405555555556, 779.15222222222235,
        782.58555555555552, 784.05611111111114, 781.81444444444458,
        781.89944444444438, 781.8705555555556, 781.21555555555551,
        775.93444444444447, 773.74388888888882, 774.44666666666672,
        777.69833333333338, 782.98666666666668, 787.43444444444447,
        792.06833333333327, 793.80055555555555, 795.18277777777791,
        795.16499999999996, 794.8122222222222, 797.75833333333333,
        803.76388888888903, 810.41555555555567, 817.07500000000016,
        822.05499999999995, 824.43499999999995, 824.81166666666684,
        826.48666666666668, 826.4222222222221, 822.82388888888875,
        817.67444444444436, 814.33444444444433, 812.68999999999994,
        809.7733333333332, 808.48722222222216, 807.47277777777765,
        807.21111111111111, 806.7788888888889, 805.23888888888894,
        803.66111111111104, 802.005, 802.31944444444446, 803.48444444444431,
        804.99777777777774, 804.99388888888882, 807.5044444444444,
        809.50999999999988, 809.91499999999996, 808.20833333333337,
        805.71055555555552, 804.90999999999997, 802.55944444444447,
        798.32666666666648, 795.61055555555549, 795.41611111111115,
        794.21555555555551, 795.01833333333343, 796.13166666666666,
        799.03277777777782, 800.37833333333322, 799.13777777777761,
        799.38499999999988, 797.56333333333316, 795.56944444444446,
        793.08333333333337, 792.15999999999997, 792.55944444444447,
        793.64166666666654, 794.49722222222215, 795.09833333333324,
        796.72777777777765, 799.08499999999992, 800.38333333333321,
        801.97277777777765, 803.63777777777784, 805.06888888888898,
        806.03444444444449, 806.3516666666668, 806.99722222222226,
        807.1633333333333, 805.54111111111115, 804.01833333333332,
        802.59277777777777, 801.51277777777784, 799.21722222222218,
        792.38388888888892, 786.50611111111095, 779.61666666666667,
        772.52444444444438, 765.57888888888886, 759.41222222222223,
        757.92888888888876, 756.5288888888889, 755.78611111111104,
        752.13666666666666, 748.25999999999988, 744.11777777777763,
        740.05555555555554, 735.68000000000018, 729.79500000000007,
        725.08277777777778, 720.59888888888884, 716.49000000000012,
        712.79777777777781]

        self.upper_band_period_6_expected = [np.nan, np.nan, np.nan, np.nan,
        np.nan, 809.65944444444438, 812.91555555555556, 814.89888888888879,
        816.08944444444433, 815.88555555555547, 817.29055555555556,
        818.74666666666678, 819.40111111111105, 818.17666666666673,
        817.81166666666661, 815.42000000000007, 811.38111111111107,
        804.36722222222204, 798.12166666666656, 790.94833333333327,
        783.36277777777775, 780.07888888888886, 779.69833333333349,
        781.19111111111113, 781.46222222222229, 783.93888888888898,
        787.29722222222222, 788.84944444444454, 786.6977777777779,
        786.88277777777773, 786.83055555555563, 786.25055555555559,
        781.04611111111114, 778.83888888888885, 779.37000000000012,
        782.58500000000004, 787.92833333333328, 792.31777777777779,
        797.07333333333327, 798.71222222222218, 800.0727777777779,
        800.16666666666663, 799.87555555555559, 802.7650000000001,
        808.63888888888903, 815.36722222222238, 822.12333333333345,
        827.05333333333328, 829.30999999999995, 829.79166666666686,
        831.39833333333331, 831.28222222222212, 827.76722222222202,
        822.55944444444435, 819.38944444444428, 817.69833333333327,
        814.78166666666652, 813.5672222222222, 812.46444444444433,
        812.3844444444444, 811.81055555555554, 810.35722222222228,
        808.87777777777774, 807.15499999999997, 807.51444444444451,
        808.60444444444431, 810.17444444444436, 810.04888888888877,
        812.54111111111104, 814.63166666666655, 814.91999999999996,
        813.18333333333339, 810.61555555555549, 809.74000000000001,
        807.4327777777778, 803.26333333333309, 800.67722222222221,
        800.47277777777788, 799.28555555555556, 800.20833333333348,
        801.29500000000007, 804.16611111111115, 805.29333333333329,
        804.00444444444429, 804.41499999999996, 802.52166666666653,
        800.46444444444444, 798.01333333333332, 797.19833333333327,
        797.56944444444446, 798.53499999999985, 799.34222222222218,
        800.04833333333329, 801.67777777777769, 804.15666666666664,
        805.51166666666654, 807.04444444444437, 808.75111111111119,
        810.12388888888893, 810.95611111111111, 811.17833333333351,
        811.85722222222228, 812.01666666666665, 810.44444444444446,
        808.92333333333329, 807.45611111111111, 806.41277777777782,
        804.04222222222211, 797.27722222222224, 791.31277777777757,
        784.48333333333335, 777.49777777777774, 770.40222222222224,
        764.19055555555553, 762.71722222222206, 761.45388888888897,
        760.74111111111108, 757.18833333333339, 753.44499999999994,
        749.42777777777769, 745.33388888888885, 740.91333333333353,
        734.8366666666667, 730.04611111111114, 725.63555555555547,
        721.46166666666682, 717.84277777777777]

        self.lower_band_period_6_expected = [np.nan, np.nan, np.nan, np.nan,
        np.nan, 799.40277777777771, 802.76555555555547, 804.84555555555551,
        806.31611111111101, 806.49222222222227, 807.83055555555575,
        809.12666666666689, 809.55111111111114, 808.33000000000015,
        807.71833333333336, 805.22333333333336, 801.11444444444442,
        794.23722222222216, 788.1149999999999, 780.93499999999995,
        773.40277777777771, 770.28555555555556, 770.00500000000011,
        771.65777777777782, 772.01888888888891, 774.36555555555572,
        777.87388888888881, 779.26277777777773, 776.93111111111125,
        776.91611111111104, 776.91055555555556, 776.18055555555543,
        770.82277777777779, 768.64888888888879, 769.52333333333331,
        772.81166666666672, 778.04500000000007, 782.55111111111114,
        787.06333333333328, 788.88888888888891, 790.29277777777793,
        790.1633333333333, 789.74888888888881, 792.75166666666655,
        798.88888888888903, 805.46388888888896, 812.02666666666687,
        817.05666666666662, 819.55999999999995, 819.83166666666682,
        821.57500000000005, 821.56222222222209, 817.88055555555547,
        812.78944444444437, 809.27944444444438, 807.68166666666662,
        804.76499999999987, 803.40722222222212, 802.48111111111098,
        802.03777777777782, 801.74722222222226, 800.1205555555556,
        798.44444444444434, 796.85500000000002, 797.12444444444441,
        798.3644444444443, 799.82111111111112, 799.93888888888887,
        802.46777777777777, 804.38833333333321, 804.90999999999997,
        803.23333333333335, 800.80555555555554, 800.07999999999993,
        797.68611111111113, 793.38999999999987, 790.54388888888877,
        790.35944444444442, 789.14555555555546, 789.82833333333338,
        790.96833333333325, 793.8994444444445, 795.46333333333314,
        794.27111111111094, 794.35499999999979, 792.60499999999979,
        790.67444444444448, 788.15333333333342, 787.12166666666667,
        787.54944444444448, 788.74833333333322, 789.65222222222212,
        790.1483333333332, 791.7777777777776, 794.01333333333321,
        795.25499999999988, 796.90111111111094, 798.5244444444445,
        800.01388888888903, 801.11277777777786, 801.52500000000009,
        802.13722222222225, 802.30999999999995, 800.63777777777784,
        799.11333333333334, 797.72944444444443, 796.61277777777786,
        794.39222222222224, 787.4905555555556, 781.69944444444434, 774.75,
        767.55111111111103, 760.75555555555547, 754.63388888888892,
        753.14055555555547, 751.60388888888883, 750.831111111111,
        747.08499999999992, 743.07499999999982, 738.80777777777757,
        734.77722222222224, 730.44666666666683, 724.75333333333344,
        720.11944444444441, 715.5622222222222, 711.51833333333343,
        707.75277777777785]

    def test_bandwidth_period_6(self):
        period = 6
        bw = keltner_bands.band_width(self.high_data, self.low_data, period)
        np.testing.assert_array_equal(bw, self.bandwidth_period_6_expected)

    def test_bandwidth_invalid_period(self):
        period = 128
        with self.assertRaises(Exception) as cm:
            keltner_bands.band_width(self.high_data, self.low_data, period)
        expected = "Error: data_len < period"
        self.assertEqual(str(cm.exception), expected)

    def test_adx_invalid_data(self):
        period = 6
        self.high_data.append(0)
        with self.assertRaises(Exception) as cm:
            keltner_bands.band_width(self.high_data, self.low_data, period)
        expected = ("Error: mismatched data lengths, check to ensure that all input data is the same length and valid")
        self.assertEqual(str(cm.exception), expected)

    def test_center_band_period_6(self):
        period = 6
        cb = keltner_bands.center_band(self.close_data, self.high_data, self.low_data, period)
        np.testing.assert_array_equal(cb, self.center_band_period_6_expected)

    def test_center_band_invalid_period(self):
        period = 128
        with self.assertRaises(Exception) as cm:
            keltner_bands.center_band(self.close_data, self.high_data, self.low_data, period)
        expected = "Error: data_len < period"
        self.assertEqual(str(cm.exception), expected)

    def test_center_band_invalid_data(self):
        period = 6
        self.high_data.append(0)
        with self.assertRaises(Exception) as cm:
            keltner_bands.center_band(self.close_data, self.high_data, self.low_data, period)
        expected = ("Error: mismatched data lengths, check to ensure that all input data is the same length and valid")
        self.assertEqual(str(cm.exception), expected)

    def test_upper_band_period_6(self):
        period = 6
        ub = keltner_bands.upper_band(self.close_data, self.high_data, self.low_data, period)
        np.testing.assert_array_equal(ub, self.upper_band_period_6_expected)

    def test_upper_band_invalid_period(self):
        period = 128
        with self.assertRaises(Exception) as cm:
            keltner_bands.upper_band(self.close_data, self.high_data, self.low_data, period)
        expected = "Error: data_len < period"
        self.assertEqual(str(cm.exception), expected)

    def test_upper_band_invalid_data(self):
        period = 6
        self.high_data.append(0)
        with self.assertRaises(Exception) as cm:
            keltner_bands.upper_band(self.close_data, self.high_data, self.low_data, period)
        expected = ("Error: mismatched data lengths, check to ensure that all input data is the same length and valid")
        self.assertEqual(str(cm.exception), expected)

    def test_lower_band_period_6(self):
        period = 6
        lb = keltner_bands.lower_band(self.close_data, self.high_data, self.low_data, period)
        np.testing.assert_array_equal(lb, self.lower_band_period_6_expected)

    def test_lower_band_invalid_period(self):
        period = 128
        with self.assertRaises(Exception) as cm:
            keltner_bands.lower_band(self.close_data, self.high_data, self.low_data, period)
        expected = "Error: data_len < period"
        self.assertEqual(str(cm.exception), expected)

    def test_lower_band_invalid_data(self):
        period = 6
        self.high_data.append(0)
        with self.assertRaises(Exception) as cm:
            keltner_bands.lower_band(self.close_data, self.high_data, self.low_data, period)
        expected = ("Error: mismatched data lengths, check to ensure that all input data is the same length and valid")
        self.assertEqual(str(cm.exception), expected)
