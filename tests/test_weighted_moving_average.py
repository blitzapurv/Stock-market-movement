from __future__ import absolute_import
import unittest
import numpy as np

from tests.sample_data import SampleData
from pyti import weighted_moving_average


class TestWeightedMovingAverage(unittest.TestCase):
    def setUp(self):
        """Create data to use for testing."""
        self.data = SampleData().get_sample_close_data()

        self.wma_period_6_expected = [np.nan, np.nan, np.nan, np.nan, np.nan,
        807.08190476190487, 809.26714285714286, 811.36904761904759,
        812.11285714285714, 811.71904761904773, 812.9895238095238,
        814.52619047619066, 814.94333333333338, 813.08523809523808,
        812.01761904761918, 807.01523809523803, 801.65428571428561,
        793.07619047619039, 787.06714285714281, 778.89428571428573,
        772.75285714285724, 772.05999999999995, 776.16000000000008,
        779.3138095238096, 780.41285714285721, 781.07476190476189,
        782.75857142857149, 783.40095238095228, 781.09571428571439,
        782.34333333333325, 781.80761904761903, 779.90523809523802,
        771.91714285714284, 770.73666666666668, 772.61761904761897,
        781.5214285714286, 791.3257142857143, 796.76333333333332,
        794.94142857142856, 792.10333333333324, 790.54809523809536,
        793.48000000000013, 797.67999999999995, 804.7390476190476,
        810.33190476190487, 815.5557142857142, 820.72190476190463,
        826.03142857142859, 826.56285714285718, 825.72571428571416,
        826.34999999999991, 824.91047619047629, 819.3142857142858,
        814.11190476190473, 810.24380952380966, 809.52428571428561,
        808.64571428571435, 809.91571428571422, 807.68857142857144,
        806.43047619047627, 804.71619047619049, 803.58333333333337,
        802.18952380952373, 802.28476190476192, 802.45571428571429,
        804.65476190476193, 806.71285714285705, 806.00999999999999,
        808.83095238095245, 811.2404761904761, 809.96380952380946,
        807.07333333333338, 803.41809523809513, 801.23047619047622,
        800.19714285714281, 796.74047619047633, 794.00047619047609,
        794.9228571428572, 792.93666666666672, 795.38238095238091,
        799.06761904761913, 802.43952380952373, 801.78952380952387,
        799.18857142857144, 796.49809523809517, 794.33380952380946,
        793.8038095238096, 793.11047619047622, 792.57333333333338,
        792.9585714285713, 794.09333333333325, 795.00999999999999,
        796.4585714285713, 798.61047619047622, 801.07142857142856,
        801.6514285714286, 803.23285714285714, 804.67952380952386,
        805.97380952380956, 806.94380952380948, 807.35190476190473,
        807.01904761904768, 806.97952380952381, 804.1280952380954,
        802.22047619047612, 801.09761904761899, 800.6076190476191,
        797.68619047619052, 788.14047619047619, 779.4457142857143,
        771.19666666666672, 764.87571428571425, 761.0861904761905,
        757.88904761904757, 757.21333333333337, 755.90619047619043,
        754.9466666666666, 749.17904761904754, 744.50238095238092,
        739.13809523809527, 735.8266666666666, 732.16809523809525,
        727.0661904761904, 720.64523809523803, 716.06380952380948,
        711.59428571428566, 709.8271428571428]

        self.wma_period_8_expected = [np.nan, np.nan, np.nan, np.nan,
        np.nan, np.nan, np.nan, 809.88111111111118, 811.13916666666671,
        811.24916666666672, 812.4569444444445, 813.85472222222222,
        814.46472222222224, 813.21194444444461, 812.35305555555556,
        808.39722222222235, 804.17555555555555, 797.14027777777778,
        791.49333333333323, 783.82833333333338, 777.61861111111114,
        775.39250000000004, 777.06916666666666, 778.49055555555549,
        778.93027777777775, 779.41638888888895, 781.15750000000003,
        782.66583333333335, 781.64694444444444, 782.56916666666666,
        781.83249999999998, 780.28749999999991, 774.16222222222211,
        772.9041666666667, 773.74527777777769, 780.33944444444444,
        787.77611111111105, 792.00138888888898, 791.13472222222219,
        790.47916666666663, 791.01277777777773, 794.3597222222221,
        797.75194444444458, 802.46833333333336, 806.30555555555543,
        811.04916666666668, 816.66861111111109, 822.56777777777768,
        824.38388888888881, 824.67000000000007, 825.7208333333333,
        825.04972222222227, 821.06944444444446, 816.88333333333344,
        813.06777777777779, 811.64083333333338, 810.39083333333338,
        810.56555555555553, 807.95638888888891, 806.60666666666668,
        805.35722222222228, 804.61027777777781, 803.37805555555553,
        803.06638888888892, 802.65333333333331, 804.08166666666659,
        805.77305555555552, 805.39055555555558, 807.75555555555547,
        809.95916666666665, 809.37055555555571, 807.48611111111109,
        804.74499999999989, 802.7786111111111, 801.87249999999995,
        798.8369444444445, 795.75333333333344, 795.64305555555575,
        793.71083333333331, 795.42944444444447, 798.20749999999998,
        800.64222222222224, 800.32000000000005, 798.90333333333331,
        797.11611111111108, 795.75750000000005, 795.45722222222219,
        794.3752777777778, 793.13388888888892, 792.86722222222215,
        793.66555555555567, 794.55166666666673, 795.88361111111112,
        797.63222222222214, 799.67333333333329, 800.50777777777773,
        802.18083333333334, 803.68888888888898, 805.07888888888874,
        806.21083333333343, 806.79777777777781, 806.66722222222222,
        806.84555555555551, 804.83083333333332, 803.29666666666662,
        802.22472222222223, 801.52749999999992, 798.89861111111111,
        791.07944444444456, 783.55694444444453, 776.27611111111116,
        770.33527777777772, 765.88916666666671, 761.46194444444438,
        758.89777777777772, 756.73638888888888, 755.58194444444439,
        750.87416666666672, 746.93583333333345, 742.19999999999993,
        738.91638888888883, 735.19638888888892, 730.13888888888891,
        723.83527777777772, 719.19361111111118, 714.87388888888881,
        712.59916666666663]

        self.wma_period_10_expected = [np.nan, np.nan, np.nan, np.nan, np.nan,
        np.nan, np.nan, np.nan, np.nan, 810.30218181818191, 811.7467272727273,
        813.17672727272725, 813.87018181818178, 813.01509090909099,
        812.47872727272727, 809.31600000000003, 805.74436363636369,
        799.76963636363644, 794.87527272727277, 788.10236363636363,
        782.13090909090909, 779.19254545454555, 779.48345454545461,
        779.58163636363645, 779.06545454545449, 778.86290909090906,
        780.04527272727273, 781.3089090909092, 780.81036363636372,
        782.20545454545459, 782.08236363636377, 780.79836363636355,
        775.53836363636367, 774.30600000000004, 774.88163636363629,
        780.05563636363627, 785.90800000000002, 789.46072727272724,
        788.89472727272721, 788.43363636363642, 789.17745454545445,
        792.86963636363635, 796.81418181818185, 801.48454545454535,
        804.88381818181824, 808.47290909090918, 812.9345454545454,
        818.40218181818182, 821.13327272727258, 822.64145454545451,
        824.42527272727273, 824.48781818181817, 821.59563636363634,
        818.3518181818182, 815.28545454545463, 813.85854545454549,
        812.21945454545471, 811.76181818181806, 809.24909090909102,
        807.59181818181821, 805.9354545454546, 805.03290909090913,
        804.03218181818193, 803.81799999999998, 803.35545454545456,
        804.2681818181818, 805.33381818181817, 804.90927272727265,
        806.93236363636356, 808.87636363636375, 808.60090909090911,
        807.30181818181802, 805.25927272727279, 803.77654545454561,
        802.99727272727273, 800.28545454545451, 797.61363636363637,
        797.17836363636354, 794.93272727272733, 795.77945454545454,
        797.80090909090916, 799.774, 799.56999999999994, 798.34454545454537,
        796.95672727272733, 796.1521818181817, 796.03018181818186,
        795.3063636363637, 794.33527272727281, 793.73109090909088,
        793.83854545454551, 794.21872727272728, 795.29109090909094,
        796.87654545454541, 798.74109090909076, 799.55345454545454,
        801.0645454545454, 802.58945454545449, 804.072, 805.30000000000018,
        806.07363636363641, 806.2401818181819, 806.56527272727271,
        804.99799999999993, 803.83436363636361, 803.00709090909095,
        802.34836363636373, 800.03545454545463, 793.37181818181818,
        786.77472727272732, 780.23800000000006, 774.58363636363629,
        770.11672727272719, 765.6307272727272, 762.40909090909099,
        759.28090909090906, 756.96381818181817, 752.32018181818182,
        748.72036363636357, 744.51763636363637, 741.45654545454545,
        737.88709090909083, 733.15618181818172, 727.26709090909083,
        722.54618181818182, 717.95818181818174, 715.2269090909092]

    def test_weighted_moving_average(self):
        period = 6
        wma = weighted_moving_average.weighted_moving_average(self.data, period)
        np.testing.assert_array_equal(wma, self.wma_period_6_expected)

    def test_wma_period_8(self):
        period = 8
        wma = weighted_moving_average.weighted_moving_average(self.data, period)
        np.testing.assert_array_equal(wma, self.wma_period_8_expected)

    def test_wma_period_10(self):
        period = 10
        wma = weighted_moving_average.weighted_moving_average(self.data, period)
        np.testing.assert_array_equal(wma, self.wma_period_10_expected)

    def test_wma_invalid_period(self):
        period = 128
        with self.assertRaises(Exception) as cm:
            weighted_moving_average.weighted_moving_average(self.data, period)
        expected = "Error: data_len < period"
        self.assertEqual(str(cm.exception), expected)
